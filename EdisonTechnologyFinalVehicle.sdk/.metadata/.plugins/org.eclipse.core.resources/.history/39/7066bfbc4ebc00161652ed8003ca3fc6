/*
 * Pl_timer_intr_test.c
 * http://www.xilinx.com/support/answers/50572.html
 *
 *  Created on: 2012-6-8
 *      Author: yzhang
 */

#include <stdio.h>

#include "interupts.h"
#include "PIDcontroller.h"
#include "platform.h"
#include "xil_types.h"
#include "xsysmon.h"
#include "xtmrctr.h"
#include "xparameters.h"
#include "Xil_exception.h"
#include "xttcps.h"
#include "xil_io.h"
#include "xil_exception.h"
#include "xscugic.h"
#include "oLED.h"
#include "xgpiops.h"

//#define BTN_GPIO_ID			XPAR_AXI_GPIO_0_DEVICE_ID
#define GPIO_GPIO_ID		XPAR_AXI_GPIO_1_DEVICE_ID
#define ROM_GPIO_ID			XPAR_AXI_GPIO_2_DEVICE_ID
#define LED_GPIO_ID			XPAR_AXI_GPIO_4_DEVICE_ID
//#define INT_BTN_GPIO		XPAR_FABRIC_AXI_GPIO_0_IP2INTC_IRPT_INTR
#define INT_TIMER			XPAR_FABRIC_AXI_TIMER_2_INTERRUPT_INTR
#define TIMER_ID			XPAR_AXI_TIMER_2_DEVICE_ID
#define UART0_ID			XPAR_PS7_UART_0_DEVICE_ID
#define UART1_ID			XPAR_PS7_UART_1_DEVICE_ID
#define IIC_ID				XPAR_PS7_I2C_0_DEVICE_ID

//void print(char *str);
extern char inbyte(void);
XGpio rst, rom;
XTtcPs ServoTimer;
int center = 0;
int previousCenter=1;
int opMode = 0;
int opMode_select = FIRST_IMAGE;

void BTN_Intr_Handler(void *InstancePtr)
{
	static int btn_value=0;
	static int gpio_last=0;
	static int encoderLast=0;

	//disable GPIO interrupts
	XGpio_InterruptDisable(&btn, INT_BTN_GPIO);
	//Ignore additional button process
	if ((XGpio_InterruptGetStatus(&btn) & 0x1) != 0x1)
	{
		return;
	}
	gpio_last=btn_value;
	btn_value = XGpio_DiscreteRead(&btn, 1);
	if ((btn_value & 0b00000000010) == 0 )//&& (gpio_last & 0b00000000010)== 2){
			if (opMode == 0){
				opMode_select++;
			if (opMode_select >= MAX_NUM_IMAGE)
				opMode_select = FIRST_IMAGE;

			display(&rom, opMode_select);
		}
	}
	if ((btn_value & 0b00000000001) == 0 && (gpio_last & 0b00000000010)== 2){
		if (opMode == 0 && opMode_select > 1){
			opMode = opMode_select - 1;
			encoderLast=btn_value & 0b100;
			//XTmrCtr_Start(&timer, 0);

		}
		else if(opMode != 0){
			opMode = 0;
			display(&rom, STANDBY_IMAGE_NUM);
			//XTmrCtr_Stop(&timer, 0);
			//XTmrCtr_Reset(&timer, 0);

		}
	}
	if((btn_value & 0b100) != encoderLast && opMode != 0){
		//intCnt++;
		encoderLast=btn_value & 0b100;
	}
	if((gpio_last & 0b00000000111) == (btn_value& 0b00000000111) && opMode != 0){
		//getDIS(btn_value>>3);

	}

	(void)XGpio_InterruptClear(&btn, INT_BTN_GPIO);
	//enable GPIO interrupts
	XGpio_InterruptEnable(&btn, INT_BTN_GPIO);
}



int main()
{
	XGpio_Initialize(&rom, ROM_GPIO_ID);
	XGpio_Initialize(&rst, GPIO_GPIO_ID);

	XGpio_SetDataDirection(&rom, 1, 0x000); //11 bits out
	XGpio_SetDataDirection(&rom, 2, 0xff); //8 bits in

	XGpio_SetDataDirection(&rst, 1, 0x0); //1 bits out
//Wait For interrupt;
setupoLED(&rst, &rom, IIC_ID);
//TTC
init_PID(7, 0, 0, 423, -423, 63);

ServoTimer= setUpTTC();
setUPAxiTimers();

int PWMSignal=0;
while(1)
{
}
	cleanup_platform();
	return 0;
	}





