/*
 * PIDcontroller.c
 *
 *  Created on: Dec 5, 2016
 *      Author: ulab
 */

#include "PIDcontroller.h"

struct PID{
	float KP;
	float KI;
	float KD;
	int secondError;
	int lastInput;
	int lastError;
	int maxOutput;
	int minOutput;
	int mid;
	float output;
	float rawOutput;
	float PTerm;
	float DTerm;
	float ITerm;
}Steering;

/*struct PID{
	float KP;
	float KI;
	float KD;
	int lastInput;
	int maxOutput;
	int minOutput;
	int mid;
	int output;
	float rawOutput;
	float ITerm;
}Steering;*/

long error[10];
long Accumulator;
/**********************************************************************
*
*	Initializes PID
*
**********************************************************************/
void init_PID(int KP, int KI, int KD, int Max, int Min, int Mid){
	Steering.KP = KP;
	Steering.KI = KI;
	Steering.KD = KD;
	Steering.lastError = 0;
	Steering.secondError = 0;
	Steering.lastInput = Mid + 1;
	Steering.maxOutput = Max;
	Steering.minOutput = Min;
	Steering.mid = Mid;
	Steering.rawOutput = 0;
	Steering.output = 0;
	Steering.PTerm = 0;
	Steering.DTerm = 0;
	Steering.ITerm = 0;
}

/*void init_PID(int KP, int KI, int KD, int Max, int Min, int Mid){
	Steering.KP = KP;
	Steering.KI = KI;
	Steering.KD = KD;
	Steering.lastInput = Mid + 1;
	Steering.maxOutput = Max;
	Steering.minOutput = Min;
	Steering.mid = Mid;
	Steering.rawOutput = 0;
	Steering.output = 0;
	Steering.ITerm = 0;
}*/

/**********************************************************************
*
*	Calculates PID
*
**********************************************************************/
int cal_PID(int input){

	int i = 0;
	for (i = 9; i>0; i--){
		error[i] = error[i-1];
	}
	error[0] = (long)input - (long)Steering.mid;
	Steering.PTerm = error[0]*Steering.KP;
	Accumulator += error[0];
	Steering.ITerm = Steering.KI*Accumulator;

	if(Steering.ITerm > Steering.maxOutput){
		Steering.ITerm=Steering.maxOutput;
	}
	else if(Steering.ITerm < Steering.minOutput) {
		Steering.ITerm = Steering.minOutput;
	}

	Steering.rawOutput = Steering.PTerm + Steering.ITerm;

	if(Steering.rawOutput >= Steering.maxOutput) {
		Steering.output= Steering.maxOutput;
	}
	else if(Steering.rawOutput <= Steering.minOutput) {
		Steering.output = Steering.minOutput;
	}
	else {
		Steering.output = Steering.rawOutput;
	}
	Steering.secondError = Steering.lastError;
	Steering.lastError = error;



















	/** ******************************************************

	//float output=0;
	//uart3_putchar(input);
	//uart3_putchar('\n');
	volatile float error = input - Steering.mid;
	//uart3_putchar(error);
	Steering.ITerm+= (Steering.KI * error);
	//if(Steering.ITerm > Steering.maxOutput){
		//Steering.ITerm=Steering.maxOutput;
	//}
	//else if(Steering.ITerm < Steering.minOutput) {
		//Steering.ITerm = Steering.minOutput;
	//}
	float DTerm = (input - Steering.lastInput);
	//Steering.rawOutput = Steering.KP * error + Steering.ITerm + Steering.KD * DTerm;
	Steering.rawOutput = Steering.KP * error + Steering.ITerm - Steering.KD * DTerm;

	if(Steering.rawOutput > Steering.maxOutput) {
		Steering.output= Steering.maxOutput;
	}
	else if(Steering.rawOutput < Steering.minOutput) {
		Steering.output = Steering.minOutput;
	}
	else {
		Steering.output = Steering.rawOutput;
	}

	Steering.lastInput = input;
	return Steering.output;
	*/
}
